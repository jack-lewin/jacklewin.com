// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NotFound should render as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NotFound />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
          404: Not Found
        </h1>,
        <p>
          Sorry! That shouldn't have happened.
        </p>,
        <p>
          <React.Fragment>
            You might want to go to my 
            <GatsbyLink
              to="/"
            >
              homepage
            </GatsbyLink>
             (and 
            <a
              href="https://twitter.com/jlewin_"
              rel="me"
            >
              let me know
            </a>
             that something's broken, if you're feeling helpful). Thank you ðŸ’›
          </React.Fragment>
        </p>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "404: Not Found",
        },
        "ref": null,
        "rendered": "404: Not Found",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sorry! That shouldn't have happened.",
        },
        "ref": null,
        "rendered": "Sorry! That shouldn't have happened.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <React.Fragment>
            You might want to go to my 
            <GatsbyLink
              to="/"
            >
              homepage
            </GatsbyLink>
             (and 
            <a
              href="https://twitter.com/jlewin_"
              rel="me"
            >
              let me know
            </a>
             that something's broken, if you're feeling helpful). Thank you ðŸ’›
          </React.Fragment>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              "You might want to go to my ",
              <GatsbyLink
                to="/"
              >
                homepage
              </GatsbyLink>,
              " (and ",
              <a
                href="https://twitter.com/jlewin_"
                rel="me"
              >
                let me know
              </a>,
              " that something's broken, if you're feeling helpful). Thank you ðŸ’›",
            ],
          },
          "ref": null,
          "rendered": Array [
            "You might want to go to my ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "homepage",
                "to": "/",
              },
              "ref": null,
              "rendered": "homepage",
              "type": [Function],
            },
            " (and ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "let me know",
                "href": "https://twitter.com/jlewin_",
                "rel": "me",
              },
              "ref": null,
              "rendered": "let me know",
              "type": "a",
            },
            " that something's broken, if you're feeling helpful). Thank you ðŸ’›",
          ],
          "type": Symbol(react.fragment),
        },
        "type": "p",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
            404: Not Found
          </h1>,
          <p>
            Sorry! That shouldn't have happened.
          </p>,
          <p>
            <React.Fragment>
              You might want to go to my 
              <GatsbyLink
                to="/"
              >
                homepage
              </GatsbyLink>
               (and 
              <a
                href="https://twitter.com/jlewin_"
                rel="me"
              >
                let me know
              </a>
               that something's broken, if you're feeling helpful). Thank you ðŸ’›
            </React.Fragment>
          </p>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "404: Not Found",
          },
          "ref": null,
          "rendered": "404: Not Found",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sorry! That shouldn't have happened.",
          },
          "ref": null,
          "rendered": "Sorry! That shouldn't have happened.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <React.Fragment>
              You might want to go to my 
              <GatsbyLink
                to="/"
              >
                homepage
              </GatsbyLink>
               (and 
              <a
                href="https://twitter.com/jlewin_"
                rel="me"
              >
                let me know
              </a>
               that something's broken, if you're feeling helpful). Thank you ðŸ’›
            </React.Fragment>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                "You might want to go to my ",
                <GatsbyLink
                  to="/"
                >
                  homepage
                </GatsbyLink>,
                " (and ",
                <a
                  href="https://twitter.com/jlewin_"
                  rel="me"
                >
                  let me know
                </a>,
                " that something's broken, if you're feeling helpful). Thank you ðŸ’›",
              ],
            },
            "ref": null,
            "rendered": Array [
              "You might want to go to my ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "homepage",
                  "to": "/",
                },
                "ref": null,
                "rendered": "homepage",
                "type": [Function],
              },
              " (and ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "let me know",
                  "href": "https://twitter.com/jlewin_",
                  "rel": "me",
                },
                "ref": null,
                "rendered": "let me know",
                "type": "a",
              },
              " that something's broken, if you're feeling helpful). Thank you ðŸ’›",
            ],
            "type": Symbol(react.fragment),
          },
          "type": "p",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
